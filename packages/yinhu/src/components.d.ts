/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from '@stencil/core/internal';
import { AutocompleteTypes, Color, StyleEventDetail, TextFieldTypes } from './interface';
import { InputChangeEventDetail } from './components/input/input';
export namespace Components {
  interface YhButton {
    /**
     * Set to `true` for a full-width button or to `false` for a full-width button without left and right borders.
     */
    block?: boolean;
    /**
     * The color to use from your application's color palette. Default options are: 'default' | 'primary' | 'success' | 'warning' | 'danger'. For more information on colors, see [theming](/docs/theming/basics).
     */
    color?: Color;
    /**
     * If `true`, the user cannot interact with the button.
     */
    disabled: boolean;
    /**
     * Set to `"outline"` for a transparent button with a border, or to `"solid"`.
     */
    fill?: 'outline' | 'solid' | 'none';
    /**
     * If this button has loading
     */
    loading?: boolean;
    /**
     * If this button loading,show the loadingText
     */
    loadingText?: string;
    /**
     * The button size.
     */
    size?: 'mini' | 'small' | 'middle' | 'large';
    /**
     * The type of the button.
     */
    type: 'submit' | 'reset' | 'button';
  }
  interface YhContent {}
  interface YhFooter {}
  interface YhGrid {
    columns?: number;
    gap?: number | number[] | string | string[];
  }
  interface YhGridItem {
    span?: number;
  }
  interface YhHeader {}
  interface YhInput {
    /**
     * If the value of the type attribute is `"file"`, then this attribute will indicate the types of files that the server accepts, otherwise it will be ignored. The value must be a comma-separated list of unique content type specifiers.
     */
    accept?: string;
    /**
     * Indicates whether and how the text value should be automatically capitalized as it is entered/edited by the user. Available options: `"off"`, `"none"`, `"on"`, `"sentences"`, `"words"`, `"characters"`.
     */
    autocapitalize: string;
    /**
     * Indicates whether the value of the control can be automatically completed by the browser.
     */
    autocomplete: AutocompleteTypes;
    /**
     * Whether auto correction should be enabled when the user is entering/editing the text value.
     */
    autocorrect: 'on' | 'off';
    /**
     * This Boolean attribute lets you specify that a form control should have input focus when the page loads.
     */
    autofocus: boolean;
    /**
     * If `true`, the value will be cleared after focus upon edit. Defaults to `true` when `type` is `"password"`, `false` for all other types.
     */
    clearOnEdit?: boolean;
    /**
     * If `true`, a clear icon will appear in the input when there is a value. Clicking it clears the input.
     */
    clearable: boolean;
    /**
     * The color to use from your application's color palette. Default options are: 'default' | 'primary' | 'success' | 'warning' | 'danger'. For more information on colors, see [theming](/docs/theming/basics).
     */
    color?: Color;
    /**
     * Set the amount of time, in milliseconds, to wait to trigger the `change` event after each keystroke. This also impacts form bindings such as `ngModel` or `v-model`.
     */
    debounce: number;
    /**
     * If `true`, the user cannot interact with the input.
     */
    disabled: boolean;
    /**
     * A hint to the browser for which enter key to display. Possible values: `"enter"`, `"done"`, `"go"`, `"next"`, `"previous"`, `"search"`, and `"send"`.
     */
    enterkeyhint?: 'enter' | 'done' | 'go' | 'next' | 'previous' | 'search' | 'send';
    /**
     * This is required for a WebKit bug which requires us to blur and focus an input to properly focus the input in an item with delegatesFocus. It will no longer be needed with iOS 14.
     */
    fireFocusEvents: boolean;
    /**
     * Returns the native `<input>` element used under the hood.
     */
    getInputElement: () => Promise<HTMLInputElement>;
    /**
     * A hint to the browser for which keyboard to display. Possible values: `"none"`, `"text"`, `"tel"`, `"url"`, `"email"`, `"numeric"`, `"decimal"`, and `"search"`.
     */
    inputmode?: 'none' | 'text' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search';
    /**
     * The maximum value, which must not be less than its minimum (min attribute) value.
     */
    max?: string;
    /**
     * If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the maximum number of characters that the user can enter.
     */
    maxlength?: number;
    /**
     * The minimum value, which must not be greater than its maximum (max attribute) value.
     */
    min?: string;
    /**
     * If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the minimum number of characters that the user can enter.
     */
    minlength?: number;
    /**
     * If `true`, the user can enter more than one value. This attribute applies when the type attribute is set to `"email"` or `"file"`, otherwise it is ignored.
     */
    multiple?: boolean;
    /**
     * The name of the control, which is submitted with the form data.
     */
    name: string;
    /**
     * A regular expression that the value is checked against. The pattern must match the entire value, not just some subset. Use the title attribute to describe the pattern to help the user. This attribute applies when the value of the type attribute is `"text"`, `"search"`, `"tel"`, `"url"`, `"email"`, `"date"`, or `"password"`, otherwise it is ignored. When the type attribute is `"date"`, `pattern` will only be used in browsers that do not support the `"date"` input type natively. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/date for more information.
     */
    pattern?: string;
    /**
     * Instructional text that shows before the input has a value.
     */
    placeholder?: string | null;
    /**
     * If `true`, the user cannot modify the value.
     */
    readonly: boolean;
    /**
     * If `true`, the user must fill in a value before submitting a form.
     */
    required: boolean;
    /**
     * Sets blur on the native `input` in `yh-input`. Use this method instead of the global `input.blur()`.
     */
    setBlur: () => Promise<void>;
    /**
     * Sets focus on the native `input` in `yh-input`. Use this method instead of the global `input.focus()`.
     */
    setFocus: () => Promise<void>;
    /**
     * The initial size of the control. This value is in pixels unless the value of the type attribute is `"text"` or `"password"`, in which case it is an integer number of characters. This attribute applies only when the `type` attribute is set to `"text"`, `"search"`, `"tel"`, `"url"`, `"email"`, or `"password"`, otherwise it is ignored.
     */
    size?: number;
    /**
     * If `true`, the element will have its spelling and grammar checked.
     */
    spellcheck: boolean;
    /**
     * Works with the min and max attributes to limit the increments at which a value can be set. Possible values are: `"any"` or a positive floating point number.
     */
    step?: string;
    /**
     * The type of control to display. The default type is text.
     */
    type: TextFieldTypes;
    /**
     * The value of the input.
     */
    value?: string | number | null;
  }
  interface YhPage {}
}
declare global {
  interface HTMLYhButtonElement extends Components.YhButton, HTMLStencilElement {}
  var HTMLYhButtonElement: {
    prototype: HTMLYhButtonElement;
    new (): HTMLYhButtonElement;
  };
  interface HTMLYhContentElement extends Components.YhContent, HTMLStencilElement {}
  var HTMLYhContentElement: {
    prototype: HTMLYhContentElement;
    new (): HTMLYhContentElement;
  };
  interface HTMLYhFooterElement extends Components.YhFooter, HTMLStencilElement {}
  var HTMLYhFooterElement: {
    prototype: HTMLYhFooterElement;
    new (): HTMLYhFooterElement;
  };
  interface HTMLYhGridElement extends Components.YhGrid, HTMLStencilElement {}
  var HTMLYhGridElement: {
    prototype: HTMLYhGridElement;
    new (): HTMLYhGridElement;
  };
  interface HTMLYhGridItemElement extends Components.YhGridItem, HTMLStencilElement {}
  var HTMLYhGridItemElement: {
    prototype: HTMLYhGridItemElement;
    new (): HTMLYhGridItemElement;
  };
  interface HTMLYhHeaderElement extends Components.YhHeader, HTMLStencilElement {}
  var HTMLYhHeaderElement: {
    prototype: HTMLYhHeaderElement;
    new (): HTMLYhHeaderElement;
  };
  interface HTMLYhInputElement extends Components.YhInput, HTMLStencilElement {}
  var HTMLYhInputElement: {
    prototype: HTMLYhInputElement;
    new (): HTMLYhInputElement;
  };
  interface HTMLYhPageElement extends Components.YhPage, HTMLStencilElement {}
  var HTMLYhPageElement: {
    prototype: HTMLYhPageElement;
    new (): HTMLYhPageElement;
  };
  interface HTMLElementTagNameMap {
    'yh-button': HTMLYhButtonElement;
    'yh-content': HTMLYhContentElement;
    'yh-footer': HTMLYhFooterElement;
    'yh-grid': HTMLYhGridElement;
    'yh-grid-item': HTMLYhGridItemElement;
    'yh-header': HTMLYhHeaderElement;
    'yh-input': HTMLYhInputElement;
    'yh-page': HTMLYhPageElement;
  }
}
declare namespace LocalJSX {
  interface YhButton {
    /**
     * Set to `true` for a full-width button or to `false` for a full-width button without left and right borders.
     */
    block?: boolean;
    /**
     * The color to use from your application's color palette. Default options are: 'default' | 'primary' | 'success' | 'warning' | 'danger'. For more information on colors, see [theming](/docs/theming/basics).
     */
    color?: Color;
    /**
     * If `true`, the user cannot interact with the button.
     */
    disabled?: boolean;
    /**
     * Set to `"outline"` for a transparent button with a border, or to `"solid"`.
     */
    fill?: 'outline' | 'solid' | 'none';
    /**
     * If this button has loading
     */
    loading?: boolean;
    /**
     * If this button loading,show the loadingText
     */
    loadingText?: string;
    /**
     * Emitted when the button loses focus.
     */
    onAliBlur?: (event: CustomEvent<void>) => void;
    /**
     * Emitted when the button is clicked.
     */
    onAliClick?: (event: CustomEvent<void>) => void;
    /**
     * Emitted when the button has focus.
     */
    onAliFocus?: (event: CustomEvent<void>) => void;
    /**
     * The button size.
     */
    size?: 'mini' | 'small' | 'middle' | 'large';
    /**
     * The type of the button.
     */
    type?: 'submit' | 'reset' | 'button';
  }
  interface YhContent {}
  interface YhFooter {}
  interface YhGrid {
    columns?: number;
    gap?: number | number[] | string | string[];
  }
  interface YhGridItem {
    span?: number;
  }
  interface YhHeader {}
  interface YhInput {
    /**
     * If the value of the type attribute is `"file"`, then this attribute will indicate the types of files that the server accepts, otherwise it will be ignored. The value must be a comma-separated list of unique content type specifiers.
     */
    accept?: string;
    /**
     * Indicates whether and how the text value should be automatically capitalized as it is entered/edited by the user. Available options: `"off"`, `"none"`, `"on"`, `"sentences"`, `"words"`, `"characters"`.
     */
    autocapitalize?: string;
    /**
     * Indicates whether the value of the control can be automatically completed by the browser.
     */
    autocomplete?: AutocompleteTypes;
    /**
     * Whether auto correction should be enabled when the user is entering/editing the text value.
     */
    autocorrect?: 'on' | 'off';
    /**
     * This Boolean attribute lets you specify that a form control should have input focus when the page loads.
     */
    autofocus?: boolean;
    /**
     * If `true`, the value will be cleared after focus upon edit. Defaults to `true` when `type` is `"password"`, `false` for all other types.
     */
    clearOnEdit?: boolean;
    /**
     * If `true`, a clear icon will appear in the input when there is a value. Clicking it clears the input.
     */
    clearable?: boolean;
    /**
     * The color to use from your application's color palette. Default options are: 'default' | 'primary' | 'success' | 'warning' | 'danger'. For more information on colors, see [theming](/docs/theming/basics).
     */
    color?: Color;
    /**
     * Set the amount of time, in milliseconds, to wait to trigger the `change` event after each keystroke. This also impacts form bindings such as `ngModel` or `v-model`.
     */
    debounce?: number;
    /**
     * If `true`, the user cannot interact with the input.
     */
    disabled?: boolean;
    /**
     * A hint to the browser for which enter key to display. Possible values: `"enter"`, `"done"`, `"go"`, `"next"`, `"previous"`, `"search"`, and `"send"`.
     */
    enterkeyhint?: 'enter' | 'done' | 'go' | 'next' | 'previous' | 'search' | 'send';
    /**
     * This is required for a WebKit bug which requires us to blur and focus an input to properly focus the input in an item with delegatesFocus. It will no longer be needed with iOS 14.
     */
    fireFocusEvents?: boolean;
    /**
     * A hint to the browser for which keyboard to display. Possible values: `"none"`, `"text"`, `"tel"`, `"url"`, `"email"`, `"numeric"`, `"decimal"`, and `"search"`.
     */
    inputmode?: 'none' | 'text' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search';
    /**
     * The maximum value, which must not be less than its minimum (min attribute) value.
     */
    max?: string;
    /**
     * If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the maximum number of characters that the user can enter.
     */
    maxlength?: number;
    /**
     * The minimum value, which must not be greater than its maximum (max attribute) value.
     */
    min?: string;
    /**
     * If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the minimum number of characters that the user can enter.
     */
    minlength?: number;
    /**
     * If `true`, the user can enter more than one value. This attribute applies when the type attribute is set to `"email"` or `"file"`, otherwise it is ignored.
     */
    multiple?: boolean;
    /**
     * The name of the control, which is submitted with the form data.
     */
    name?: string;
    /**
     * Emitted when the value has changed.
     */
    onChange?: (event: CustomEvent<InputChangeEventDetail>) => void;
    /**
     * Emitted when the input has focus.
     */
    onClear?: (event: CustomEvent<InputChangeEventDetail>) => void;
    /**
     * Emitted when the input loses focus.
     */
    onYhBlur?: (event: CustomEvent<FocusEvent>) => void;
    /**
     * Emitted when the input has focus.
     */
    onYhFocus?: (event: CustomEvent<FocusEvent>) => void;
    /**
     * Emitted when a keyboard input occurred.
     */
    onYhInput?: (event: CustomEvent<KeyboardEvent>) => void;
    /**
     * Emitted when the styles change.
     */
    onYhStyle?: (event: CustomEvent<StyleEventDetail>) => void;
    /**
     * A regular expression that the value is checked against. The pattern must match the entire value, not just some subset. Use the title attribute to describe the pattern to help the user. This attribute applies when the value of the type attribute is `"text"`, `"search"`, `"tel"`, `"url"`, `"email"`, `"date"`, or `"password"`, otherwise it is ignored. When the type attribute is `"date"`, `pattern` will only be used in browsers that do not support the `"date"` input type natively. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/date for more information.
     */
    pattern?: string;
    /**
     * Instructional text that shows before the input has a value.
     */
    placeholder?: string | null;
    /**
     * If `true`, the user cannot modify the value.
     */
    readonly?: boolean;
    /**
     * If `true`, the user must fill in a value before submitting a form.
     */
    required?: boolean;
    /**
     * The initial size of the control. This value is in pixels unless the value of the type attribute is `"text"` or `"password"`, in which case it is an integer number of characters. This attribute applies only when the `type` attribute is set to `"text"`, `"search"`, `"tel"`, `"url"`, `"email"`, or `"password"`, otherwise it is ignored.
     */
    size?: number;
    /**
     * If `true`, the element will have its spelling and grammar checked.
     */
    spellcheck?: boolean;
    /**
     * Works with the min and max attributes to limit the increments at which a value can be set. Possible values are: `"any"` or a positive floating point number.
     */
    step?: string;
    /**
     * The type of control to display. The default type is text.
     */
    type?: TextFieldTypes;
    /**
     * The value of the input.
     */
    value?: string | number | null;
  }
  interface YhPage {}
  interface IntrinsicElements {
    'yh-button': YhButton;
    'yh-content': YhContent;
    'yh-footer': YhFooter;
    'yh-grid': YhGrid;
    'yh-grid-item': YhGridItem;
    'yh-header': YhHeader;
    'yh-input': YhInput;
    'yh-page': YhPage;
  }
}
export { LocalJSX as JSX };
declare module '@stencil/core' {
  export namespace JSX {
    interface IntrinsicElements {
      'yh-button': LocalJSX.YhButton & JSXBase.HTMLAttributes<HTMLYhButtonElement>;
      'yh-content': LocalJSX.YhContent & JSXBase.HTMLAttributes<HTMLYhContentElement>;
      'yh-footer': LocalJSX.YhFooter & JSXBase.HTMLAttributes<HTMLYhFooterElement>;
      'yh-grid': LocalJSX.YhGrid & JSXBase.HTMLAttributes<HTMLYhGridElement>;
      'yh-grid-item': LocalJSX.YhGridItem & JSXBase.HTMLAttributes<HTMLYhGridItemElement>;
      'yh-header': LocalJSX.YhHeader & JSXBase.HTMLAttributes<HTMLYhHeaderElement>;
      'yh-input': LocalJSX.YhInput & JSXBase.HTMLAttributes<HTMLYhInputElement>;
      'yh-page': LocalJSX.YhPage & JSXBase.HTMLAttributes<HTMLYhPageElement>;
    }
  }
}
